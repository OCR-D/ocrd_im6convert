#!/usr/bin/env bash
# shellcheck disable=SC2086

set -eu
set -o pipefail

which ocrd >/dev/null 2>/dev/null || { echo >&2 "ocrd not in \$PATH. Panicking"; exit 1; }
((BASH_VERSINFO[0]<4 || BASH_VERSINFO[1]<4)) && echo >&2 "bash $BASH_VERSION is too old. Panicking" && exit 1

SHAREDIR="$(cd "$(dirname "$0")" >/dev/null && pwd)"

MIMETYPE_PAGE=$(ocrd bashlib constants MIMETYPE_PAGE)
declare -A MIME_TO_EXT
eval "MIME_TO_EXT=( $(ocrd bashlib constants MIME_TO_EXT) )"

# FIXME: add a bashlib wrapper for logging to use here
function log {
    echo >&2 "$(date +%T.%3N) $LEVEL ocrd-im6convert - $1"
}
function critical { LEVEL=CRITICAL log "$1"; }
function error { LEVEL=ERROR log "$1"; }
function warning { LEVEL=WARNING log "$1"; }
function info { LEVEL=INFO log "$1"; }
function debug { LEVEL=DEBUG log "$1"; }

main () {
    # Load ocrd bashlib functions
    # shellcheck source=../core/ocrd/bashlib/lib.bash
    source $(ocrd bashlib filename)

    # Describe calling script to lib.bash
    ocrd__wrap "$SHAREDIR/ocrd-tool.json" "ocrd-im6convert" "$@"

    cd "${ocrd__argv[working_dir]}"
    page_id=${ocrd__argv[page_id]:-}
    in_file_grp=${ocrd__argv[input_file_grp]}
    out_file_grp=${ocrd__argv[output_file_grp]}
    mkdir -p $out_file_grp

    # Set output extension
    local output_extension
    output_extension="${MIME_TO_EXT[${params['output-format']}]}"
    # Set input and output options
    local input_options output_options
    input_options=(${params['input-options']})
    output_options=(${params['output-options']})

    # Download the files and do the conversion
    local IFS=$'\n'
    files=($(ocrd workspace find \
        ${page_id:+-g} ${page_id:-} \
        -G $in_file_grp \
        -k local_filename \
        -k ID \
        -k pageId \
        --download))
    local IFS=$' \t\n'
    local n=0 zeros=0000
    for csv in "${files[@]}"; do
        let n+=1
        # Parse comma separated fields
        local IFS=$'\t'
        local fields=($csv)
        local IFS=$' \t\n'

        local in_file="${fields[0]}"
        local in_id="${fields[1]}"
        local pageid="${fields[2]:-}"

        if ! test -f "$in_file"; then
           error "input file \"$in_file\" ID=${in_id} (pageId=${pageid}) is not on disk"
           continue
        fi

        # Output filename
        local out_id="${in_id//$in_file_grp/$out_file_grp}"
        if [ "x$out_id" = "x$in_id" ]; then
            out_id=${out_file_grp}_${zeros:0:$((4-${#n}))}$n
        fi
        local out_file="$out_file_grp/${out_id}$output_extension"

        # Actual conversion
        info "processing image input file $in_id ($pageid)"
        convert "${input_options[@]}" "$in_file" "${output_options[@]}" "$out_file"

        # Add the output files
        declare -a options
        if [ -n "$pageid" ]; then
            options=( -g $pageid )
        else
            options=()
        fi
        options+=( -G $out_file_grp
                   -m "${params['output-format']}"
                   -i "$out_id"
                   "$out_file" )
        ocrd workspace add "${options[@]}"
    done
}


main "$@"
